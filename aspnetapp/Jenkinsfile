pipeline {
    agent any
    environment {
        REGISTRY_URL = 'aspnetimg.azurecr.io'
        REGISTRY_CREDENTIALS_ID = 'ACR'
        AKS_RESOURCE_GROUP = 'jenkins-rg'
        AKS_CLUSTER_NAME = 'aspnet-cluster'
        KUBECONFIG_PATH = '/var/lib/jenkins/.kube/config'
        
        DOCKERFILE_PATH = '/aspnetapp/Dockerfile'
        JENKINSFILE_PATH = '/aspnetapp/Jenkinsfile'
    }
    stages {
         stage ('checkout') {
            steps {
            checkout([$class: 'GitSCM', branches: [[name: '*/main']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://github.com/vaishnavi-g06/aspnet-mssql']]])
            }
        }
        stage('Build') {
            steps {
                // Build your Docker image using the fetched Dockerfile
                script {
                    docker.build("my-image:${env.BUILD_NUMBER}", "-f ${env.DOCKERFILE_PATH} .")
                }
            }
        }
        stage('Push to ACR') {
            steps {
                withCredentials([usernamePassword(credentialsId: env.REGISTRY_CREDENTIALS_ID, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    // Log in to ACR
                    script {
                        docker.withRegistry("${env.REGISTRY_URL}", "${env.USERNAME}", "${env.PASSWORD}") {
                            // Push the image to ACR
                            docker.image("my-image:${env.BUILD_NUMBER}").push()
                        }
                    }
                }
            }
        }
       stage('Deploy to AKS') {
    steps {
        withCredentials([file(credentialsId: 'aks_cred', variable: 'KUBECONFIG_PATH')]) {
            // Deploy the image to AKS using Kubernetes YAML file
            script {
                sh "kubectl apply -f path/to/kubernetes.yaml --kubeconfig=${env.KUBECONFIG_PATH}"
            }
        }
    }
}






    }
}
